from decode import decode_teachers
from lazy_logger import lazy_logger
import json


def format_outputs(parsed_schedule, context):
    from datetime import datetime
    text = ""
    WEEKDAYS = {
        1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        2: "–í—Ç–æ—Ä–Ω–∏–∫",
        3: "–°—Ä–µ–¥–∞",
        4: "–ß–µ—Ç–≤–µ—Ä–≥",
        5: "–ü—è—Ç–Ω–∏—Ü–∞",
        6: "–°—É–±–±–æ—Ç–∞",
    }

    blocks = []

    for schedule in parsed_schedule:

        error_message = None

        try:
            room = schedule["room"]["name"] if schedule["room"] is not None else ""
            campus = schedule["room"]["campus"]["short_name"] if schedule["room"] and schedule["room"]["campus"] else ""

            if campus != "":
                room = f"{room} ({campus})"

            else:
                room = f"{room}"

            weekday = WEEKDAYS[schedule["weekday"]]
            teachers = ", ".join(decode_teachers(
                [context.user_data["teacher"]]))

            time_start = datetime.strptime(
                schedule['calls']['time_start'],
                "%H:%M:%S").strftime("%H:%M")

            time_end = datetime.strptime(
                schedule['calls']['time_end'],
                "%H:%M:%S").strftime("%H:%M")

            formatted_time = f"{time_start} ‚Äì {time_end}"

            type = schedule["lesson_type"]["name"] if schedule["lesson_type"] else ""

            text += f'üìù –ü–∞—Ä–∞ ‚Ññ {schedule["calls"]["num"]} –≤ ‚è∞ {formatted_time}\n'
            text += f'üìù {schedule["discipline"]["name"]}\n'
            text += f'üë• –ì—Ä—É–ø–ø—ã: {schedule["group"]["name"]}\n'
            text += f'üìö –¢–∏–ø: {type}\n'
            text += f"üë®üèª‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: {teachers}\n"
            text += f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏–∏: {room}\n"
            text += f'üìÖ –ù–µ–¥–µ–ª–∏: {schedule["weeks"]}\n'
            text += f"üìÜ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {weekday}\n\n"

            blocks.append(text)
            text = ""

        except Exception as e:

            if str(e) == error_message:
                lazy_logger.error(json.dumps(
                    {"type": "error",
                     "teacher": context.user_data['teacher'],
                     "week": context.user_data['week'],
                     }, ensure_ascii=False))

            else:
                error_message = str(e)
                lazy_logger.error(json.dumps(
                    {"type": "error",
                     "teacher": context.user_data['teacher'],
                     "week": context.user_data['week'],
                     }, ensure_ascii=False))
                text += "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —á–∞—Ç–µ " \
                        "https://t.me/mirea_ninja_chat"
                blocks.append(text)
                text = ""

    return blocks


def normalize_teachername(raw_teacher_name: str):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–º–∏–ª–∏–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.
    @param raw_teacher_name: –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @return: –§–∞–º–∏–ª–∏—è –Ω–∞—á–∏–Ω–∞—è—é—â–∞—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –∏ —Å –ø—Ä–æ–±–µ–ª–æ–º –≤ –∫–æ–Ω—Ü–µ
    """
    teacher = raw_teacher_name.title()

    if " " not in teacher:
        teacher += " "

    return teacher

import requests
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from bot import ImportantDays
import datetime as datetime

from decode import decode_teachers


def construct_teacher_workdays(teacher: str, week: int, schedule: list):
    """
    –°–æ–∑–¥–∞–µ—Ç Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏, –∫–æ–≥–¥–∞ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–∞—Ä—ã.
    –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–∞—Ä—ã, —Ç–æ –∫–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞–≤–µ–Ω –¥–Ω—é –Ω–µ–¥–µ–ª–∏
    –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç, —Ç–æ –∫–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ —Ä–∞–≤–µ–Ω 'chill'
    @param teacher: –ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    @param week: –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
    @param schedule: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ JSON
    @return: InlineKeyboard —Å–æ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    """

    founded_days = list(
        {lesson['weekday'] for teacher in schedule for lesson in teacher['lessons'] if week in lesson['weeks']})

    no_work_indicator = "üèñÔ∏è"
    weekdays = {
        1: "–ü–ù",
        2: "–í–¢",
        3: "–°–†",
        4: "–ß–¢",
        5: "–ü–¢",
        6: "–°–ë",
    }
    ready_markup = InlineKeyboardMarkup([])
    row_list = []
    for i in range(1, 7):
        sign = ""
        callback = i

        if i not in founded_days:
            sign = "‚õî"
            callback = "chill"
        row_list.append(
            InlineKeyboardButton(
                text=f"{sign}{weekdays[i]}{sign}",
                callback_data=callback))

        if i % 3 == 0:
            ready_markup.inline_keyboard.append(row_list)
            row_list = []

    if founded_days:  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞ –Ω–µ–¥–µ–ª—é" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä—ã –Ω–∞ –Ω–µ–¥–µ–ª–µ
        row_list.append(
            InlineKeyboardButton(
                text="–ù–∞ –Ω–µ–¥–µ–ª—é",
                callback_data="week"))
        ready_markup.inline_keyboard.append(row_list)
    row_list = []
    row_list.append(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
    ready_markup.inline_keyboard.append(row_list)

    return ready_markup


def construct_teacher_markup(teachers):
    """
    –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ—Ñ–∞–º–∏–ª—å—Ü–µ–≤
    :param teachers: –ª–∏—Å—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    """
    rawNames = teachers
    decoded_names = decode_teachers(rawNames)

    btns = []

    for rawName, decoded_name in zip(rawNames, decoded_names):
        btns = btns + \
               [[InlineKeyboardButton(decoded_name, callback_data=rawName)]]
    btns = btns + [[(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back"))]]
    TEACHER_CLARIFY_MARKUP = InlineKeyboardMarkup(btns)

    return TEACHER_CLARIFY_MARKUP


def construct_weeks_markup():
    """
    –°–æ–∑–¥–∞–µ—Ç KeyboardMarkup —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–µ–¥–µ–ª—å, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏
    –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–π –ø–∞–º—è—Ç–Ω–æ–π –¥–∞—Ç–µ+-–∏–Ω—Ç–µ—Ä–≤–∞–ª
    """
    req = requests.get(
        "https://schedule.mirea.ninja/api/schedule/current_week").json()
    current_week = req["week"]
    week_indicator = "‚óè"
    today = datetime.date.today()

    for day in ImportantDays.important_days:
        if abs((day[ImportantDays.DATE] -
                today).days) <= day[ImportantDays.INTERVAL]:
            week_indicator = day[ImportantDays.SIGN]

    reply_mark = InlineKeyboardMarkup([])
    button_list = []

    for i in range(1, 18):
        tmp_sign = ""
        if current_week == i:
            tmp_sign = week_indicator
        button_list.append(
            InlineKeyboardButton(
                text=f"{tmp_sign}{i}{tmp_sign}",
                callback_data=i))

        if i % 4 == 0 or i == 17:
            reply_mark.inline_keyboard.append(button_list)
            button_list = []

    backspace = []

    backspace.append(
        InlineKeyboardButton(
            text="–°–µ–≥–æ–¥–Ω—è",
            callback_data="today"))

    backspace.append(
        InlineKeyboardButton(
            text="–ó–∞–≤—Ç—Ä–∞",
            callback_data="tomorrow"))

    reply_mark.inline_keyboard.append(backspace)

    backspace = []

    backspace.append(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"))
    reply_mark.inline_keyboard.append(backspace)

    return reply_mark
